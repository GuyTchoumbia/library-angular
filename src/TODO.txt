module document
 - filtres:
done* deplacer vers le service
done*create map(key, value) where key = document.property and value = nomber of occurences of said property in results
	for filter listing
done	* html/css
done	* links to result page of each filter
 - list: 
done	* sort select: ascending/descending by name, etc
done	* html/css
done	* links to auteur and editeur
	* paginator
 - details:
done	* html/css
	* links to auteur/ editeur: needs API implementation
	* exemplaire field
	* link to user
	* available/ not available (rented/not)
	* if logged, reservation (reserved property on document)	

 - common
done 	* user class
	* document: 
done:		borrowed property
		NB: BORROWED PROPERTY IS INFERRED BACK SIDE FROM THE PRESENCE OR NOT OF A USER PROPERTY ASSOCIATED WITH THE BOOK. 
		THE USER PROPERTY MUST NOT BE ACCESSIBLE TO THE USER, ONLY THE BORROWED PROPERTY
		RECIPROCLY, THE USER CLASS IS ACCESSIBLE TO ITS OWN USER, ONLY THEN CAN HE ACCESS ITS BORROWED DOCUMENT (DOCUMENTS LIST) PROPERTY,
		AS WELL AS ITS RESERVED (LIST) PROPERTY.
		RESERVED PROPERTY CAN BE SET BY THE USER, BUT NOT READ (!!!)

 - searchbar
	* login dialog html css

 - AuthService:
	* AuthGuard for user settings page

 - Account Settings page
	* html/css
	* modify user properties (not name/surname.birthdate (affect credentials), just adress and contact info...)
done	* see rented documents
done	* see reserved documents, (remove them?)

 - Advanced Search
 	* menu from search bar input, like hotmail.
	*html/css

 - COOKIES AND COOKIES POLICY SHIT 	
	
API	
* integration/modification of API
 - entites: 
		* create roles and filters: 
			-> web request doesnt contain user property of documents, but only isBorrowed property.
			-> each user can have access, and only access to its own documents (borrowed list);
		* create quantity property, linked to user/document.
			Each document is unique, albeit has a unique "CÃ´te" property, but each library can have multiple copies of the same document, 
			meaning a search of one document will return the multiple copies across libraries.
			Quantity property would serve to display the different copies each library contains.

			each document has a list of "cotes", each cote has a library (therefore each library has a list of cotes instead of a list of documents)

		* create user.reserved property, same as borrowed, can only be accessed by its user.
		* create document.borrowDate: date d'emprunt.
			return date is inferred: like BorrowDate+15 days.
 - authentification through token ???????
 - deploy on Tomcat 8.5 server
 - various tweaks on paths.

 -user: id is card number, password is auto generated from birth year and letters from name/surname.

MOBILE:
 - keep it simple. basicly a simpler version of web features.
 results are larger (cf google results), filters is a togglabe sidenav of the page. everything is way more vertical.

 menu will include Home, Login/logout/account, exit.
 Home will include links to library info pages.
 and thats pretty much it. 

 JAVA CLIENT:
	- remove card reader feature (no time!)